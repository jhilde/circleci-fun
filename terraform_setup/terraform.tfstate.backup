{
  "version": 4,
  "terraform_version": "0.13.4",
  "serial": 2,
  "lineage": "fc432dc3-6df8-56c9-3ae4-d6e698628461",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "aws_cloudformation_stack",
      "name": "ecs_service",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": []
    },
    {
      "mode": "managed",
      "type": "aws_cloudformation_stack",
      "name": "vpc",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "status": "tainted",
          "schema_version": 0,
          "attributes": {
            "capabilities": [
              "CAPABILITY_NAMED_IAM"
            ],
            "disable_rollback": null,
            "iam_role_arn": null,
            "id": "arn:aws:cloudformation:us-east-1:669821887388:stack/testingfun-vpc-stack/53f70ab0-05e9-11eb-b8bb-0a254e00bc9f",
            "name": "testingfun-vpc-stack",
            "notification_arns": null,
            "on_failure": null,
            "outputs": null,
            "parameters": {
              "ClusterName": "testingfun-cluster",
              "ExecutionRoleName": "testingfun-ecs-execution-role"
            },
            "policy_body": null,
            "policy_url": null,
            "tags": null,
            "template_body": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: A stack for deploying containerized applications in AWS Fargate.\n             This stack runs containers in a public VPC subnet, and includes a\n             public facing load balancer to register the services in.\nParameters:\n  ClusterName:\n    Type: String\n    Description: Name of the ECS cluster to be created\n  ExecutionRoleName:\n    Type: String\n    Description: Name of the IAM role used by the ECS tasks to be created\n\nMappings:\n  # Hard values for the subnet masks. These masks define\n  # the range of internal IP addresses that can be assigned.\n  # The VPC can have all IP's from 10.0.0.0 to 10.0.255.255\n  # There are two subnets which cover the ranges:\n  #\n  # 10.0.0.0 - 10.0.0.255\n  # 10.0.1.0 - 10.0.1.255\n  #\n  # If you need more IP addresses (perhaps you have so many\n  # instances that you run out) then you can customize these\n  # ranges to add more\n  SubnetConfig:\n    VPC:\n      CIDR: '10.0.0.0/16'\n    PublicOne:\n      CIDR: '10.0.0.0/24'\n    PublicTwo:\n      CIDR: '10.0.1.0/24'\nResources:\n  # VPC in which containers will be networked.\n  # It has two public subnets\n  # We distribute the subnets across the first two available subnets\n  # for the region, for high availability.\n  VPC:\n    Type: AWS::EC2::VPC\n    Properties:\n      EnableDnsSupport: true\n      EnableDnsHostnames: true\n      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']\n\n  # Two public subnets, where containers can have public IP addresses\n  PublicSubnetOne:\n    Type: AWS::EC2::Subnet\n    Properties:\n      AvailabilityZone:\n         Fn::Select:\n         - 0\n         - Fn::GetAZs: {Ref: 'AWS::Region'}\n      VpcId: !Ref 'VPC'\n      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']\n      MapPublicIpOnLaunch: true\n  PublicSubnetTwo:\n    Type: AWS::EC2::Subnet\n    Properties:\n      AvailabilityZone:\n         Fn::Select:\n         - 1\n         - Fn::GetAZs: {Ref: 'AWS::Region'}\n      VpcId: !Ref 'VPC'\n      CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']\n      MapPublicIpOnLaunch: true\n\n  # Setup networking resources for the public subnets. Containers\n  # in the public subnets have public IP addresses and the routing table\n  # sends network traffic via the internet gateway.\n  InternetGateway:\n    Type: AWS::EC2::InternetGateway\n  GatewayAttachement:\n    Type: AWS::EC2::VPCGatewayAttachment\n    Properties:\n      VpcId: !Ref 'VPC'\n      InternetGatewayId: !Ref 'InternetGateway'\n  PublicRouteTable:\n    Type: AWS::EC2::RouteTable\n    Properties:\n      VpcId: !Ref 'VPC'\n  PublicRoute:\n    Type: AWS::EC2::Route\n    DependsOn: GatewayAttachement\n    Properties:\n      RouteTableId: !Ref 'PublicRouteTable'\n      DestinationCidrBlock: '0.0.0.0/0'\n      GatewayId: !Ref 'InternetGateway'\n  PublicSubnetOneRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PublicSubnetOne\n      RouteTableId: !Ref PublicRouteTable\n  PublicSubnetTwoRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PublicSubnetTwo\n      RouteTableId: !Ref PublicRouteTable\n\n  # ECS Resources\n  ECSCluster:\n    Type: AWS::ECS::Cluster\n    Properties:\n      # Fix a name to avoid having an auto-generated one\n      ClusterName: !Ref 'ClusterName'\n\n  # A security group for the containers we will run in Fargate.\n  # Two rules, allowing network traffic from a public facing load\n  # balancer and from other members of the security group.\n  #\n  # Remove any of the following ingress rules that are not needed.\n  # If you want to make direct requests to a container using its\n  # public IP address you'll need to add a security group rule\n  # to allow traffic from all IP addresses.\n  FargateContainerSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: Access to the Fargate containers\n      VpcId: !Ref 'VPC'\n  EcsSecurityGroupIngressFromPublicALB:\n    Type: AWS::EC2::SecurityGroupIngress\n    Properties:\n      Description: Ingress from the public ALB\n      GroupId: !Ref 'FargateContainerSecurityGroup'\n      IpProtocol: -1\n      SourceSecurityGroupId: !Ref 'PublicLoadBalancerSG'\n  EcsSecurityGroupIngressFromSelf:\n    Type: AWS::EC2::SecurityGroupIngress\n    Properties:\n      Description: Ingress from other containers in the same security group\n      GroupId: !Ref 'FargateContainerSecurityGroup'\n      IpProtocol: -1\n      SourceSecurityGroupId: !Ref 'FargateContainerSecurityGroup'\n\n  # Load balancers for getting traffic to containers.\n  # This sample template creates one load balancer:\n  #\n  # - One public load balancer, hosted in public subnets that is accessible\n  #   to the public, and is intended to route traffic to one or more public\n  #   facing services.\n\n  # A public facing load balancer, this is used for accepting traffic from the public\n  # internet and directing it to public facing microservices\n  PublicLoadBalancerSG:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: Access to the public facing load balancer\n      VpcId: !Ref 'VPC'\n      SecurityGroupIngress:\n          # Allow access to ALB from anywhere on the internet\n          - CidrIp: 0.0.0.0/0\n            IpProtocol: -1\n  PublicLoadBalancer:\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n    Properties:\n      Scheme: internet-facing\n      LoadBalancerAttributes:\n      - Key: idle_timeout.timeout_seconds\n        Value: '30'\n      Subnets:\n        # The load balancer is placed into the public subnets, so that traffic\n        # from the internet can reach the load balancer directly via the internet gateway\n        - !Ref PublicSubnetOne\n        - !Ref PublicSubnetTwo\n      SecurityGroups: [!Ref 'PublicLoadBalancerSG']\n  # A dummy target group is used to setup the ALB to just drop traffic\n  # initially, before any real service target groups have been added.\n  DummyTargetGroupPublic:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      HealthCheckIntervalSeconds: 6\n      HealthCheckPath: /\n      HealthCheckProtocol: HTTP\n      HealthCheckTimeoutSeconds: 5\n      HealthyThresholdCount: 2\n      Name: !Join ['-', [!Ref 'AWS::StackName', 'drop-1']]\n      Port: 80\n      Protocol: HTTP\n      UnhealthyThresholdCount: 2\n      VpcId: !Ref 'VPC'\n  PublicLoadBalancerListener:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    DependsOn:\n      - PublicLoadBalancer\n    Properties:\n      DefaultActions:\n        - TargetGroupArn: !Ref 'DummyTargetGroupPublic'\n          Type: 'forward'\n      LoadBalancerArn: !Ref 'PublicLoadBalancer'\n      Port: 80\n      Protocol: HTTP\n\n  # This is an IAM role which authorizes ECS to manage resources on your\n  # account on your behalf, such as updating your load balancer with the\n  # details of where your containers are, so that traffic can reach your\n  # containers.\n  ECSRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n        - Effect: Allow\n          Principal:\n            Service: [ecs.amazonaws.com]\n          Action: ['sts:AssumeRole']\n      Path: /\n      Policies:\n      - PolicyName: ecs-service\n        PolicyDocument:\n          Statement:\n          - Effect: Allow\n            Action:\n              # Rules which allow ECS to attach network interfaces to instances\n              # on your behalf in order for awsvpc networking mode to work right\n              - 'ec2:AttachNetworkInterface'\n              - 'ec2:CreateNetworkInterface'\n              - 'ec2:CreateNetworkInterfacePermission'\n              - 'ec2:DeleteNetworkInterface'\n              - 'ec2:DeleteNetworkInterfacePermission'\n              - 'ec2:Describe*'\n              - 'ec2:DetachNetworkInterface'\n\n              # Rules which allow ECS to update load balancers on your behalf\n              # with the information sabout how to send traffic to your containers\n              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'\n              - 'elasticloadbalancing:DeregisterTargets'\n              - 'elasticloadbalancing:Describe*'\n              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'\n              - 'elasticloadbalancing:RegisterTargets'\n            Resource: '*'\n\n  # This is a role which is used by the ECS tasks themselves.\n  ECSTaskExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n        - Effect: Allow\n          Principal:\n            Service: [ecs-tasks.amazonaws.com]\n          Action: ['sts:AssumeRole']\n      Path: /\n      Policies:\n        - PolicyName: AmazonECSTaskExecutionRolePolicy\n          PolicyDocument:\n            Statement:\n            - Effect: Allow\n              Action:\n                # Allow the ECS Tasks to download images from ECR\n                - 'ecr:GetAuthorizationToken'\n                - 'ecr:BatchCheckLayerAvailability'\n                - 'ecr:GetDownloadUrlForLayer'\n                - 'ecr:BatchGetImage'\n\n                # Allow the ECS tasks to upload logs to CloudWatch\n                - 'logs:CreateLogStream'\n                - 'logs:PutLogEvents'\n              Resource: '*'\n      RoleName: !Ref 'ExecutionRoleName'\n\n# These are the values output by the CloudFormation template. Be careful\n# about changing any of them, because of them are exported with specific\n# names so that the other task related CF templates can use them.\nOutputs:\n  ClusterName:\n    Description: The name of the ECS cluster\n    Value: !Ref 'ECSCluster'\n    Export:\n      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ClusterName' ] ]\n  ExternalUrl:\n    Description: The url of the external load balancer\n    Value: !Join ['', ['http://', !GetAtt 'PublicLoadBalancer.DNSName']]\n    Export:\n      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ExternalUrl' ] ]\n  ECSRole:\n    Description: The ARN of the ECS role\n    Value: !GetAtt 'ECSRole.Arn'\n    Export:\n      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ECSRole' ] ]\n  ECSTaskExecutionRole:\n    Description: The ARN of the ECS role\n    Value: !GetAtt 'ECSTaskExecutionRole.Arn'\n    Export:\n      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ECSTaskExecutionRole' ] ]\n  PublicListener:\n    Description: The ARN of the public load balancer's Listener\n    Value: !Ref PublicLoadBalancerListener\n    Export:\n      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicListener' ] ]\n  VPCId:\n    Description: The ID of the VPC that this stack is deployed in\n    Value: !Ref 'VPC'\n    Export:\n      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'VPCId' ] ]\n  PublicSubnetOne:\n    Description: Public subnet one\n    Value: !Ref 'PublicSubnetOne'\n    Export:\n      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnetOne' ] ]\n  PublicSubnetTwo:\n    Description: Public subnet two\n    Value: !Ref 'PublicSubnetTwo'\n    Export:\n      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnetTwo' ] ]\n  FargateContainerSecurityGroup:\n    Description: A security group used to allow Fargate containers to receive traffic\n    Value: !Ref 'FargateContainerSecurityGroup'\n    Export:\n      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'FargateContainerSecurityGroup' ] ]\n",
            "template_url": null,
            "timeout_in_minutes": null,
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxODAwMDAwMDAwMDAwLCJkZWxldGUiOjE4MDAwMDAwMDAwMDAsInVwZGF0ZSI6MTgwMDAwMDAwMDAwMH19"
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_ecr_repository",
      "name": "demo-app-repository",
      "provider": "provider[\"registry.terraform.io/hashicorp/aws\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ecr:us-east-1:669821887388:repository/testingfun",
            "id": "testingfun",
            "image_scanning_configuration": [
              {
                "scan_on_push": false
              }
            ],
            "image_tag_mutability": "MUTABLE",
            "name": "testingfun",
            "registry_id": "669821887388",
            "repository_url": "669821887388.dkr.ecr.us-east-1.amazonaws.com/testingfun",
            "tags": null,
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjoxMjAwMDAwMDAwMDAwfX0="
        }
      ]
    }
  ]
}
